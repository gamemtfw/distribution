diff --git a/arch/arm64/boot/dts/rockchip/rk3566-evb2-lp4x-v10-linux.dts b/arch/arm64/boot/dts/rockchip/rk3566-evb2-lp4x-v10-linux.dts
index cd97f6d86..d9c8754b0 100755
--- a/arch/arm64/boot/dts/rockchip/rk3566-evb2-lp4x-v10-linux.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3566-evb2-lp4x-v10-linux.dts
@@ -30,22 +30,22 @@
 			gpios = <&gpio4 RK_PC3 GPIO_ACTIVE_HIGH>;
 			default-state = "on";
 		};
-		workled {
+		left_joystick {
 			gpios = <&gpio0 RK_PC2 GPIO_ACTIVE_HIGH>;
 			default-state = "on";
 		};		
-		yglled {
+		workled {
 			gpios = <&gpio4 RK_PC4 GPIO_ACTIVE_HIGH>;
 			default-state = "on";
 		};
-		ygrled {
+		right_joystick {
 			gpios = <&gpio4 RK_PC5 GPIO_ACTIVE_HIGH>;
 			default-state = "on";
 		};
-		motor {
+		/*motor {
 			gpios = <&gpio3 RK_PC4 GPIO_ACTIVE_HIGH>;
 			default-state = "off";
-		};
+		};*/
 	};
 
 	adc_keys: adc-keys {
@@ -140,6 +140,11 @@
 	joypad: singleadc-joypad {
 		compatible = "singleadc-joypad";
 
+		pwms = <&pwm14 0 200000000 0>;
+		pwm-names = "enable";
+		rumble-boost-weak = <0x0000>;
+		rumble-boost-strong = <0x0000>;
+
 		joypad-name = "retrogame_joypad";
 		joypad-product = <0x1101>;
 		joypad-revision = <0x0100>;
@@ -149,6 +154,7 @@
 		/* gpio pincontrol setup */
 		pinctrl-names = "default";
 		pinctrl-0 = <&btn_pins>;
+		pinctrl-1 = <&pwm14m0_pins>;
 
 		/* Analog mux define */
 		io-channel-names = "amux_adc";
@@ -186,11 +192,11 @@
 		abs_y-p-tuning = <450>;
 		abs_y-n-tuning = <450>;
 
-		abs_rx-p-tuning = <250>;
-		abs_rx-n-tuning = <250>;
+		abs_rx-p-tuning = <450>;
+		abs_rx-n-tuning = <450>;
 
-		abs_ry-p-tuning = <250>;
-		abs_ry-n-tuning = <250>;
+		abs_ry-p-tuning = <450>;
+		abs_ry-n-tuning = <450>;
 
 		/* poll device interval (ms), adc read interval */
 		poll-interval = <10>;
@@ -998,16 +1004,16 @@
 
 		battery {
 			compatible = "rk817,battery";
-			ocv_table = <3500 3524 3552 3579 3601 3618 3635
-				     3656 3682 3717 3764 3815 3854 3886 
-				     3914 3958 4003 4027 4054 4102 4176>;
-			design_capacity = <4605>;
+			ocv_table = <3400 3460 3504 3546 3579 3607 3627
+				     3647 3670 3701 3745 3804 3850 3882 
+				     3907 3959 4005 4024 4050 4106 4187>;
+			design_capacity = <5120>;
 			design_qmax = <5500>;
-			bat_res = <82>;
+			bat_res = <67>;
 			sleep_enter_current = <150>;
 			sleep_exit_current = <180>;
 			sleep_filter_current = <100>;
-			power_off_thresd = <3500>;
+			power_off_thresd = <3400>;
 			zero_algorithm_vol = <3850>;
 			max_soc_offset = <60>;
 			monitor_sec = <5>;
@@ -1258,7 +1264,7 @@
 					<4 RK_PA3 RK_FUNC_GPIO &pcfg_pull_up>,
 					<4 RK_PA4 RK_FUNC_GPIO &pcfg_pull_up>,
 					<4 RK_PB3 RK_FUNC_GPIO &pcfg_pull_up>,
-					<4 RK_PB4 RK_FUNC_GPIO &pcfg_pull_up>,										
+					<4 RK_PB4 RK_FUNC_GPIO &pcfg_pull_up>,
 					<4 RK_PA6 RK_FUNC_GPIO &pcfg_pull_up>,
 					<3 RK_PD3 RK_FUNC_GPIO &pcfg_pull_up>,
 					<3 RK_PD4 RK_FUNC_GPIO &pcfg_pull_up>,
@@ -1279,10 +1285,20 @@
 	vccio7-supply = <&vcc_3v3>;
 };
 
+&pwm0 {
+	status = "okay";
+	label = "rumble-pwm";
+};
+
 &pwm4 {
 	status = "okay";
 };
 
+&pwm14 {
+	pinctrl-0 = <&pwm14m0_pins>;
+	status = "okay";
+};
+
 &rk_rga {
 	status = "okay";
 };
@@ -1396,8 +1412,6 @@
 	pinctrl-0 = <&uart1m0_xfer &uart1m0_ctsn>;
 };
 
-
-
 /**************************3.0 otg***********************************/
 &usbdrd30 { 
 	status = "okay";
diff --git a/drivers/input/joystick/singleadcjoy.c b/drivers/input/joystick/singleadcjoy.c
index 9db72178d..c6ac6f612 100644
--- a/drivers/input/joystick/singleadcjoy.c
+++ b/drivers/input/joystick/singleadcjoy.c
@@ -24,14 +24,25 @@
 #include <linux/property.h>
 #include <linux/of_gpio.h>
 #include <linux/delay.h>
-
+#include <linux/pwm.h>
 /*----------------------------------------------------------------------------*/
 #define DRV_NAME "retrogame_joypad"
 #define __MURMUR__
+#define __MURMUR__
 /*----------------------------------------------------------------------------*/
 #define	ADC_MAX_VOLTAGE		1800
 #define	ADC_DATA_TUNING(x, p)	((x * p) / 100)
 #define	ADC_TUNING_DEFAULT	180
+#define	CLAMP(x, low, high)  (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
+
+static int dbg_enable=1;
+
+#define DBG(args...) \
+	do { \
+		if (dbg_enable) { \
+			pr_info(args); \
+		} \
+	} while (0)
 
 struct bt_adc {
 	/* report value (mV) */
@@ -89,6 +100,16 @@ struct joypad {
 	int amux_count;
 	/* analog button */
 	struct bt_adc *adcs;
+	
+	/* report reference point */
+	bool invert_absx;
+	bool invert_absy;
+	bool invert_absrx;
+	bool invert_absry;
+
+	/* switch x with y */
+	bool switch_xy;
+	bool switch_rxy;
 
 	/* report interval (ms) */
 	int bt_gpio_count;
@@ -108,8 +129,50 @@ struct joypad {
 
 	/* amux debug channel */
 	int debug_ch;
+
+	/* pwm device for rumble*/
+	struct input_dev *input;
+	struct pwm_device *pwm;
+	struct work_struct play_work;
+	u16 level;
+	u16 boost_weak;
+	u16 boost_strong;
 };
 
+static int pwm_vibrator_start(struct joypad *joypad)
+{
+	struct pwm_state state;
+	int err;
+
+	pwm_get_state(joypad->pwm, &state);
+	pwm_set_relative_duty_cycle(&state, joypad->level, 0xffff);
+	state.enabled = true;
+
+	err = pwm_apply_state(joypad->pwm, &state);
+	if (err) {
+		DBG("failed to apply pwm state: %d", err);
+		return err;
+	}
+
+	return 0;
+}
+
+static void pwm_vibrator_stop(struct joypad *joypad)
+{
+	pwm_disable(joypad->pwm);
+}
+
+static void pwm_vibrator_play_work(struct work_struct *work)
+{
+	struct joypad *joypad = container_of(work,
+					struct joypad, play_work);
+
+	if (joypad->level)
+		pwm_vibrator_start(joypad);
+	else
+		pwm_vibrator_stop(joypad);
+}
+
 /*----------------------------------------------------------------------------*/
 //
 // set to the value in the boot.ini file. (if exist)
@@ -158,28 +221,56 @@ __setup("button-adc-deadzone=", button_adc_deadzone);
 
 /*----------------------------------------------------------------------------*/
 /*----------------------------------------------------------------------------*/
-static int joypad_amux_select(struct analog_mux *amux, int channel)
+static int joypad_amux_select(struct analog_mux *amux, int channel, struct joypad *joypad)
 {
 	/* select mux channel */
 	gpio_set_value(amux->en_gpio, 0);
 
 	switch(channel) {
 		case 0:	/* EVENT (ABS_RY) */
+			if (joypad->switch_rxy) {
+				gpio_set_value(amux->sel_a_gpio, 0);
+				gpio_set_value(amux->sel_b_gpio, 1);
+				break;
+			}
+			else {
 			gpio_set_value(amux->sel_a_gpio, 0);
 			gpio_set_value(amux->sel_b_gpio, 0);
 			break;
+			}
 		case 1:	/* EVENT (ABS_RX) */
+			if (joypad->switch_rxy){
+				gpio_set_value(amux->sel_a_gpio, 0);
+				gpio_set_value(amux->sel_b_gpio, 0);
+				break;
+			}
+			else {
 			gpio_set_value(amux->sel_a_gpio, 0);
 			gpio_set_value(amux->sel_b_gpio, 1);
 			break;
+			}
 		case 2:	/* EVENT (ABS_Y) */
+			if (joypad->switch_xy) {
+				gpio_set_value(amux->sel_a_gpio, 1);
+				gpio_set_value(amux->sel_b_gpio, 1);
+				break;
+			}
+			else {
 			gpio_set_value(amux->sel_a_gpio, 1);
 			gpio_set_value(amux->sel_b_gpio, 0);
 			break;
+			}
 		case 3:	/* EVENT (ABS_X) */
+			if (joypad->switch_xy) {
+				gpio_set_value(amux->sel_a_gpio, 1);
+				gpio_set_value(amux->sel_b_gpio, 0);
+				break;
+			}
+			else {
 			gpio_set_value(amux->sel_a_gpio, 1);
 			gpio_set_value(amux->sel_b_gpio, 1);
 			break;
+			}
 		default:
 			/* amux disanle */
 			gpio_set_value(amux->en_gpio, 1);
@@ -191,22 +282,18 @@ static int joypad_amux_select(struct analog_mux *amux, int channel)
 }
 
 /*----------------------------------------------------------------------------*/
-static int joypad_adc_read(struct analog_mux *amux, struct bt_adc *adc)
+static int joypad_adc_read(struct analog_mux *amux, struct bt_adc *adc, struct joypad *joypad)
 {
 	int value;
 
-
-	if (joypad_amux_select(amux, adc->amux_ch))
+	if (joypad_amux_select(amux, adc->amux_ch, joypad))
 		return 0;
 
 	iio_read_channel_raw(amux->iio_ch, &value);
 
 	value *= adc->scale;
-#ifdef __LEFT_JOYSTICK_INVERT__
+
 	return value;
-#else
-	return (adc->invert ? (adc->max - value) : value);
-#endif
 }
 
 /*----------------------------------------------------------------------------*/
@@ -355,9 +442,9 @@ static ssize_t joypad_store_adc_cal(struct device *dev,
 		for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
 			struct bt_adc *adc = &joypad->adcs[nbtn];
 
-			adc->value = joypad_adc_read(joypad->amux, adc);
+			adc->value = joypad_adc_read(joypad->amux, adc, joypad);
 			if (!adc->value) {
-				dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+				DBG("%s : saradc channels[%d]!\n",
 					__func__, nbtn);
 				continue;
 			}
@@ -436,7 +523,7 @@ static ssize_t joypad_show_amux_debug(struct device *dev,
 	if (joypad->enable)
 		joypad->enable = false;
 
-	if (joypad_amux_select(amux, joypad->debug_ch))
+	if (joypad_amux_select(amux, joypad->debug_ch, joypad))
 		goto err_out;
 
 	if (iio_read_channel_processed(amux->iio_ch, &value))
@@ -519,8 +606,123 @@ static DEVICE_ATTR(vol, S_IWUSR | S_IRUGO,joypad_show_vol, joypad_store_vol);
 
 /*----------------------------------------------------------------------------*/
 #endif
-#ifdef __MURMUR__
 /*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/rumble_period [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_period(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	pwm_set_period(joypad->pwm, simple_strtoul(buf, NULL, 21));
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_period(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", pwm_get_period(joypad->pwm));
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(rumble_period, S_IWUSR | S_IRUGO,
+		   joypad_show_period,
+		   joypad_store_period);
+
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/rumble_boost_strong [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_boost_strong(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->boost_strong = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_boost_strong(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->boost_strong);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(rumble_boost_strong, S_IWUSR | S_IRUGO,
+		   joypad_show_boost_strong,
+		   joypad_store_boost_strong);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/odroidgo2_joypad/rumble_boost_weak [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_boost_weak(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->boost_weak = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_boost_weak(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->boost_weak);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(rumble_boost_weak, S_IWUSR | S_IRUGO,
+		   joypad_show_boost_weak,
+		   joypad_store_boost_weak);
+
+#ifdef __MURMUR__
 static struct attribute *joypad_attrs[] = {
 	&dev_attr_poll_interval.attr,
 	&dev_attr_adc_fuzz.attr,
@@ -529,6 +731,9 @@ static struct attribute *joypad_attrs[] = {
 	&dev_attr_adc_cal.attr,
 	&dev_attr_amux_debug.attr,
 	&dev_attr_vol.attr,
+	&dev_attr_rumble_period.attr,
+	&dev_attr_rumble_boost_strong.attr,
+	&dev_attr_rumble_boost_weak.attr,
 	NULL,
 };
 #else
@@ -540,6 +745,9 @@ static struct attribute *joypad_attrs[] = {
 	&dev_attr_enable.attr,
 	&dev_attr_adc_cal.attr,
 	&dev_attr_amux_debug.attr,
+	&dev_attr_rumble_period.attr,
+	&dev_attr_rumble_boost_strong.attr,
+	&dev_attr_rumble_boost_weak.attr,
 	NULL,
 };
 #endif
@@ -559,7 +767,7 @@ static void joypad_gpio_check(struct input_polled_dev *poll_dev)
 		struct bt_gpio *gpio = &joypad->gpios[nbtn];
 
 		if (gpio_get_value_cansleep(gpio->num) < 0) {
-			dev_err(joypad->dev, "failed to get gpio state\n");
+			DBG("failed to get gpio state\n");
 			continue;
 		}
 		value = gpio_get_value(gpio->num);
@@ -583,9 +791,9 @@ static void joypad_adc_check(struct input_polled_dev *poll_dev)
 	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
 		struct bt_adc *adc = &joypad->adcs[nbtn];
 
-		adc->value = joypad_adc_read(joypad->amux, adc);
+		adc->value = joypad_adc_read(joypad->amux, adc, joypad);
 		if (!adc->value) {
-			//dev_err(joypad->dev, "%s : saradc channels[%d]! adc->value : %d\n",__func__, nbtn, adc->value);
+			//DBG("%s : saradc channels[%d]! adc->value : %d\n",__func__, nbtn, adc->value);
 			continue;
 		}
 		adc->value = adc->value - adc->cal;
@@ -646,14 +854,14 @@ static void joypad_open(struct input_polled_dev *poll_dev)
 	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
 		struct bt_adc *adc = &joypad->adcs[nbtn];
 
-		adc->value = joypad_adc_read(joypad->amux, adc);
+		adc->value = joypad_adc_read(joypad->amux, adc, joypad);
 		if (!adc->value) {
-			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+			DBG("%s : saradc channels[%d]!\n",
 				__func__, nbtn);
 			continue;
 		}
 		adc->cal = adc->value;
-		dev_info(joypad->dev, "%s : adc[%d] adc->cal = %d\n",
+		DBG("%s : adc[%d] adc->cal = %d\n",
 			__func__, nbtn, adc->cal);
 	}
 	/* buttons status sync */
@@ -665,7 +873,7 @@ static void joypad_open(struct input_polled_dev *poll_dev)
 	joypad->enable = true;
 	mutex_unlock(&joypad->lock);
 
-	dev_info(joypad->dev, "%s : opened\n", __func__);
+	DBG("%s : opened\n", __func__);
 }
 
 /*----------------------------------------------------------------------------*/
@@ -678,7 +886,10 @@ static void joypad_close(struct input_polled_dev *poll_dev)
 	joypad->enable = false;
 	mutex_unlock(&joypad->lock);
 
-	dev_info(joypad->dev, "%s : closed\n", __func__);
+	cancel_work_sync(&joypad->play_work);
+	pwm_vibrator_stop(joypad);
+
+	DBG("%s : closed\n", __func__);
 }
 
 /*----------------------------------------------------------------------------*/
@@ -693,13 +904,13 @@ static int joypad_amux_setup(struct device *dev, struct joypad *joypad)
 	joypad->amux = devm_kzalloc(dev, sizeof(struct analog_mux),
 					GFP_KERNEL);
 	if (!joypad->amux) {
-		dev_err(dev, "%s amux devm_kzmalloc error!", __func__);
+		DBG("%s amux devm_kzmalloc error!", __func__);
 		return -ENOMEM;
 	}
 	amux = joypad->amux;
 	amux->iio_ch = devm_iio_channel_get(dev, "amux_adc");
 	if (IS_ERR(amux->iio_ch)) {
-		dev_err(dev, "iio channel get error\n");
+		DBG("iio channel get error\n");
 		return -EINVAL;
 	}
 	if (!amux->iio_ch->indio_dev)
@@ -709,7 +920,7 @@ static int joypad_amux_setup(struct device *dev, struct joypad *joypad)
 		return -EINVAL;
 
 	if (type != IIO_VOLTAGE) {
-		dev_err(dev, "Incompatible channel type %d\n", type);
+		DBG("Incompatible channel type %d\n", type);
 		return -EINVAL;
 	}
 
@@ -718,7 +929,7 @@ static int joypad_amux_setup(struct device *dev, struct joypad *joypad)
 	if (gpio_is_valid(amux->sel_a_gpio)) {
 		ret = devm_gpio_request(dev, amux->sel_a_gpio, "amux-sel-a");
 		if (ret < 0) {
-			dev_err(dev, "%s : failed to request amux-sel-a %d\n",
+			DBG("%s : failed to request amux-sel-a %d\n",
 				__func__, amux->sel_a_gpio);
 			goto err_out;
 		}
@@ -732,7 +943,7 @@ static int joypad_amux_setup(struct device *dev, struct joypad *joypad)
 	if (gpio_is_valid(amux->sel_b_gpio)) {
 		ret = devm_gpio_request(dev, amux->sel_b_gpio, "amux-sel-b");
 		if (ret < 0) {
-			dev_err(dev, "%s : failed to request amux-sel-b %d\n",
+			DBG("%s : failed to request amux-sel-b %d\n",
 				__func__, amux->sel_b_gpio);
 			goto err_out;
 		}
@@ -746,7 +957,7 @@ static int joypad_amux_setup(struct device *dev, struct joypad *joypad)
 	if (gpio_is_valid(amux->en_gpio)) {
 		ret = devm_gpio_request(dev, amux->en_gpio, "amux-en");
 		if (ret < 0) {
-			dev_err(dev, "%s : failed to request amux-en %d\n",
+			DBG("%s : failed to request amux-en %d\n",
 				__func__, amux->en_gpio);
 			goto err_out;
 		}
@@ -768,7 +979,7 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 	joypad->adcs = devm_kzalloc(dev, joypad->amux_count *
 				sizeof(struct bt_adc), GFP_KERNEL);
 	if (!joypad->adcs) {
-		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		DBG("%s devm_kzmalloc error!", __func__);
 		return -ENOMEM;
 	}
 
@@ -788,7 +999,9 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 
 		switch (nbtn) {
 			case 0:
-				adc->report_type = ABS_RY;
+				if (joypad->invert_absry)
+					adc->invert = true;
+				adc->report_type = ABS_RZ;
 				if (device_property_read_u32(dev,
 					"abs_ry-p-tuning",
 					&adc->tuning_p))
@@ -799,7 +1012,9 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 					adc->tuning_n = ADC_TUNING_DEFAULT;
 				break;
 			case 1:
-				adc->report_type = ABS_RX;
+				if (joypad->invert_absrx)
+					adc->invert = true;
+				adc->report_type = ABS_Z;
 				if (device_property_read_u32(dev,
 					"abs_rx-p-tuning",
 					&adc->tuning_p))
@@ -810,9 +1025,8 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 					adc->tuning_n = ADC_TUNING_DEFAULT;
 				break;
 			case 2:
-			#ifdef __LEFT_JOYSTICK_INVERT__
-				adc->invert = true;	
-			#endif
+				if (joypad->invert_absy)
+					adc->invert = true;	
 				adc->report_type = ABS_Y;
 				if (device_property_read_u32(dev,
 					"abs_y-p-tuning",
@@ -824,9 +1038,8 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 					adc->tuning_n = ADC_TUNING_DEFAULT;
 				break;
 			case 3:
-			#ifdef __LEFT_JOYSTICK_INVERT__
-				adc->invert = true;	
-			#endif
+				if (joypad->invert_absx)
+					adc->invert = true;	
 				adc->report_type = ABS_X;
 				if (device_property_read_u32(dev,
 					"abs_x-p-tuning",
@@ -838,7 +1051,7 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 					adc->tuning_n = ADC_TUNING_DEFAULT;
 				break;
 			default :
-				dev_err(dev, "%s amux count(%d) error!",
+				DBG("%s amux count(%d) error!",
 					__func__, nbtn);
 				return -EINVAL;
 		}
@@ -860,7 +1073,7 @@ static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
 				sizeof(struct bt_gpio), GFP_KERNEL);
 
 	if (!joypad->gpios) {
-		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		DBG("%s devm_kzmalloc error!", __func__);
 		return -ENOMEM;
 	}
 
@@ -873,7 +1086,7 @@ static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
 		gpio->num = of_get_gpio_flags(pp, 0, &flags);
 		if (gpio->num < 0) {
 			error = gpio->num;
-			dev_err(dev, "Failed to get gpio flags, error: %d\n",
+			DBG("Failed to get gpio flags, error: %d\n",
 				error);
 			return error;
 		}
@@ -887,14 +1100,13 @@ static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
 			error = devm_gpio_request_one(dev, gpio->num,
 						      GPIOF_IN, gpio->label);
 			if (error < 0) {
-				dev_err(dev,
-					"Failed to request GPIO %d, error %d\n",
+				DBG("Failed to request GPIO %d, error %d\n",
 					gpio->num, error);
 				return error;
 			}
 		}
 		if (of_property_read_u32(pp, "linux,code", &gpio->linux_code)) {
-			dev_err(dev, "Button without keycode: 0x%x\n",
+			DBG("Button without keycode: 0x%x\n",
 				gpio->num);
 			return -EINVAL;
 		}
@@ -908,6 +1120,53 @@ static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
 	return	0;
 }
 
+static int rumble_play_effect(struct input_dev *dev, void *data, struct ff_effect *effect)
+{
+	struct joypad *joypad = data;
+	u32 boosted_level;
+	if (effect->type != FF_RUMBLE)
+		return 0;
+
+	if (effect->u.rumble.strong_magnitude)
+		boosted_level = effect->u.rumble.strong_magnitude + joypad->boost_strong;
+	else
+		boosted_level = effect->u.rumble.weak_magnitude + joypad->boost_weak;
+
+	joypad->level = (u16)CLAMP(boosted_level, 0, 0xffff);
+
+	DBG("joypad->level = %d",  joypad->level);
+	schedule_work(&joypad->play_work);
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_rumble_setup(struct device *dev, struct joypad *joypad)
+{
+	int err;
+	struct pwm_state state;
+
+	joypad->pwm = devm_pwm_get(dev, "enable");
+	if (IS_ERR(joypad->pwm))
+	{
+		DBG("rumble get error\n");
+		return -EINVAL;
+	}
+
+	INIT_WORK(&joypad->play_work, pwm_vibrator_play_work);
+
+	/* Sync up PWM state and ensure it is off. */
+	pwm_init_state(joypad->pwm, &state);
+	state.enabled = false;
+	err = pwm_apply_state(joypad->pwm, &state);
+	if (err) {
+		DBG("failed to apply initial PWM state: %d",
+			err);
+		return err;
+	}
+	DBG("rumble setup success!\n");
+	return 0;
+}
+
 /*----------------------------------------------------------------------------*/
 struct input_dev * joypad_input_g;
 
@@ -941,10 +1200,11 @@ static int joypad_input_setup(struct device *dev, struct joypad *joypad)
 	int nbtn, error;
 	u32 joypad_revision = 0;
 	u32 joypad_product = 0;
-
+	u32 boost_weak = 0;
+	u32 boost_strong = 0;
 	poll_dev = devm_input_allocate_polled_device(dev);
 	if (!poll_dev) {
-		dev_err(dev, "no memory for polled device\n");
+		DBG("no memory for polled device\n");
 		return -ENOMEM;
 	}
 
@@ -955,6 +1215,7 @@ static int joypad_input_setup(struct device *dev, struct joypad *joypad)
 	poll_dev->close		= joypad_close;
 
 	input = poll_dev->input;
+	joypad->input = poll_dev->input;
 	joypad_input_g=input;
 
 	device_property_read_string(dev, "joypad-name", &input->name);
@@ -975,17 +1236,29 @@ static int joypad_input_setup(struct device *dev, struct joypad *joypad)
 				adc->min, adc->max,
 				joypad->bt_adc_fuzz,
 				joypad->bt_adc_flat);
-		dev_info(dev,
-			"%s : SCALE = %d, ABS min = %d, max = %d,"
+		DBG("%s : SCALE = %d, ABS min = %d, max = %d,"
 			" fuzz = %d, flat = %d, deadzone = %d\n",
 			__func__, adc->scale, adc->min, adc->max,
 			joypad->bt_adc_fuzz, joypad->bt_adc_flat,
 			joypad->bt_adc_deadzone);
-		dev_info(dev,
-			"%s : adc tuning_p = %d, adc_tuning_n = %d\n\n",
+		DBG("%s : adc tuning_p = %d, adc_tuning_n = %d\n\n",
 			__func__, adc->tuning_p, adc->tuning_n);
 	}
 
+	/* Rumble setip*/
+	device_property_read_u32(dev, "rumble-boost-weak", &boost_weak);
+	device_property_read_u32(dev, "rumble-boost-strong", &boost_strong);
+	joypad->boost_weak = boost_weak;
+	joypad->boost_strong = boost_strong;
+	DBG("Boost = %d, %d",boost_weak, boost_strong);
+	input_set_capability(input, EV_FF, FF_RUMBLE);
+	error = input_ff_create_memless(input, joypad, rumble_play_effect);
+	if (error) {
+		DBG("unable to register rumble, err=%d\n",
+			error);
+		return error;
+	}
+
 	/* GPIO key setup */
 	__set_bit(EV_KEY, input->evbit);
 	for(nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
@@ -1001,7 +1274,7 @@ static int joypad_input_setup(struct device *dev, struct joypad *joypad)
 
 	error = input_register_polled_device(poll_dev);
 	if (error) {
-		dev_err(dev, "unable to register polled device, err=%d\n",
+		DBG("unable to register polled device, err=%d\n",
 			error);
 		return error;
 	}
@@ -1062,10 +1335,24 @@ static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
 
 	joypad->auto_repeat = device_property_present(dev, "autorepeat");
 
+	/* change the report reference point? (ADC MAX - read value) */
+	joypad->invert_absx = device_property_present(dev, "invert-absx");
+	joypad->invert_absy = device_property_present(dev, "invert-absy");
+	joypad->invert_absrx = device_property_present(dev, "invert-absrx");
+	joypad->invert_absry = device_property_present(dev, "invert-absry");
+	DBG("%s : invert-absx = %d, inveret-absy = %d, invert-absrx = %d, inveret-absry = %d\n",
+		__func__, joypad->invert_absx, joypad->invert_absy, joypad->invert_absrx, joypad->invert_absry);
+
+	/* switch x with y */
+	joypad->switch_xy = device_property_present(dev, "switch-xy");
+	joypad->switch_rxy = device_property_present(dev, "switch-rxy");
+	dev_info(dev, "%s : switch-xy = %d, inveret-rxy = %d\n",
+		__func__, joypad->switch_xy, joypad->switch_rxy);
+
 	joypad->bt_gpio_count = device_get_child_node_count(dev);
 
 	if ((joypad->amux_count == 0) || (joypad->bt_gpio_count == 0)) {
-		dev_err(dev, "adc key = %d, gpio key = %d error!",
+		DBG("adc key = %d, gpio key = %d error!",
 			joypad->amux_count, joypad->bt_gpio_count);
 		return -EINVAL;
 	}
@@ -1082,12 +1369,38 @@ static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
 	if (error)
 		return error;
 
-	dev_info(dev, "%s : adc key cnt = %d, gpio key cnt = %d\n",
+	DBG("%s : adc key cnt = %d, gpio key cnt = %d\n",
 			__func__, joypad->amux_count, joypad->bt_gpio_count);
 
 	return error;
 }
 
+static int __maybe_unused joypad_suspend(struct device *dev)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	cancel_work_sync(&joypad->play_work);
+	if (joypad->level)
+		pwm_vibrator_stop(joypad);
+
+	return 0;
+}
+
+static int __maybe_unused joypad_resume(struct device *dev)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	if (joypad->level)
+		pwm_vibrator_start(joypad);
+
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(joypad_pm_ops,
+			 joypad_suspend, joypad_resume);
+
 /*----------------------------------------------------------------------------*/
 static int joypad_probe(struct platform_device *pdev)
 {
@@ -1097,14 +1410,14 @@ static int joypad_probe(struct platform_device *pdev)
 
 	joypad = devm_kzalloc(dev, sizeof(struct joypad), GFP_KERNEL);
 	if (!joypad) {
-		dev_err(dev, "joypad devm_kzmalloc error!");
+		DBG("joypad devm_kzmalloc error!");
 		return -ENOMEM;
 	}
 
 	/* device tree data parse */
 	error = joypad_dt_parse(dev, joypad);
 	if (error) {
-		dev_err(dev, "dt parse error!(err = %d)\n", error);
+		DBG("dt parse error!(err = %d)\n", error);
 		return error;
 	}
 
@@ -1113,7 +1426,7 @@ static int joypad_probe(struct platform_device *pdev)
 
 	error = sysfs_create_group(&pdev->dev.kobj, &joypad_attr_group);
 	if (error) {
-		dev_err(dev, "create sysfs group fail, error: %d\n",
+		DBG("create sysfs group fail, error: %d\n",
 			error);
 		return error;
 	}
@@ -1121,10 +1434,18 @@ static int joypad_probe(struct platform_device *pdev)
 	/* poll input device setup */
 	error = joypad_input_setup(dev, joypad);
 	if (error) {
-		dev_err(dev, "input setup failed!(err = %d)\n", error);
+		DBG("input setup failed!(err = %d)\n", error);
 		return error;
 	}
-	dev_info(dev, "%s : probe success\n", __func__);
+
+	/* rumble setup */
+	error = joypad_rumble_setup(dev, joypad);
+	if (error) {
+		DBG("rumble setup failed!(err = %d)\n", error);
+		return error;
+	}
+
+	DBG("%s : probe success\n", __func__);
 	return 0;
 }
 
@@ -1141,6 +1462,7 @@ static struct platform_driver joypad_driver = {
 	.probe = joypad_probe,
 	.driver = {
 		.name = DRV_NAME,
+		.pm = &joypad_pm_ops,
 		.of_match_table = of_match_ptr(joypad_of_match),
 	},
 };
diff --git a/drivers/power/supply/rk817_battery.c b/drivers/power/supply/rk817_battery.c
index b3f4ea228..ec1599e6c 100644
--- a/drivers/power/supply/rk817_battery.c
+++ b/drivers/power/supply/rk817_battery.c
@@ -1656,32 +1656,49 @@ static void rk817_bat_not_first_pwron(struct rk817_battery_device *battery)
 		ocv_vol = rk817_bat_get_ocv_voltage(battery);
 		ocv_soc = rk817_bat_vol_to_soc(battery, ocv_vol) * 1000;
 		ocv_cap = rk817_bat_vol_to_cap(battery, ocv_vol);
-		DBG("battery->is_ocv_calib ocv_vol=%d, ocv_soc=%d, ocv_cap=%d, pre_soc=%d\n", ocv_vol, ocv_soc, ocv_cap, pre_soc);
-		pre_cap = ocv_cap;
-		battery->ocv_pre_dsoc = pre_soc;
-		battery->ocv_new_dsoc = ocv_soc;
-		if (abs(ocv_soc - pre_soc) >= battery->pdata->max_soc_offset * 1000) {
+		// Sometimes, this value is way too small
+		// It will cause 0% issue
+		// If we got a riduculus small value, skip caliboration
+		// Reduce possiblilty to get 0% when boot
+		if (ocv_cap > 3200) 
+		{
+			DBG("battery->is_ocv_calib ocv_vol=%d, ocv_soc=%d, ocv_cap=%d, pre_soc=%d\n", ocv_vol, ocv_soc, ocv_cap, pre_soc);
+			pre_cap = ocv_cap;
 			battery->ocv_pre_dsoc = pre_soc;
 			battery->ocv_new_dsoc = ocv_soc;
-			battery->is_max_soc_offset = true;
-			DBG("trigger max soc offset, dsoc: %d -> %d\n",
-				 pre_soc, ocv_soc);
-			pre_soc = ocv_soc;
+			if (abs(ocv_soc - pre_soc) >= battery->pdata->max_soc_offset * 1000) {
+				battery->ocv_pre_dsoc = pre_soc;
+				battery->ocv_new_dsoc = ocv_soc;
+				battery->is_max_soc_offset = true;
+				DBG("trigger max soc offset, dsoc: %d -> %d\n",
+					pre_soc, ocv_soc);
+				pre_soc = ocv_soc;
+			}
+			DBG("OCV calib1: cap=%d, rsoc=%d\n", ocv_cap, ocv_soc);
+		} else {
+			DBG("OCV calib1: ocv_vol = %d, which is too small, skip calib\n", ocv_vol);
 		}
-		DBG("OCV calib: cap=%d, rsoc=%d\n", ocv_cap, ocv_soc);
+		
 	} else if (battery->pwroff_min > 0) {
 		ocv_vol = rk817_bat_get_ocv_voltage(battery);
 		ocv_soc = rk817_bat_vol_to_soc(battery, ocv_vol) * 1000;
 		ocv_cap = rk817_bat_vol_to_cap(battery, ocv_vol);
-		battery->force_pre_dsoc = pre_soc;
-		battery->force_new_dsoc = ocv_soc;
-		DBG("battery->pwroff_min ocv_vol=%d, ocv_soc=%d, ocv_cap=%d, pre_soc=%d\n", ocv_vol, ocv_soc, ocv_cap, pre_soc);
-		if (abs(ocv_soc - pre_soc) >= 80000) {
-			battery->is_force_calib = true;
-			DBG("dsoc force calib: %d -> %d\n",
-				 pre_soc, ocv_soc);
-			pre_soc = ocv_soc;
-			pre_cap = ocv_cap;
+		// Similar to above.
+		if (ocv_cap > 3200)
+		{
+			battery->force_pre_dsoc = pre_soc;
+			battery->force_new_dsoc = ocv_soc;
+			DBG("battery->pwroff_min ocv_vol=%d, ocv_soc=%d, ocv_cap=%d, pre_soc=%d\n", ocv_vol, ocv_soc, ocv_cap, pre_soc);
+			if (abs(ocv_soc - pre_soc) >= 80000) {
+				battery->is_force_calib = true;
+				DBG("dsoc force calib: %d -> %d\n",
+					pre_soc, ocv_soc);
+				pre_soc = ocv_soc;
+				pre_cap = ocv_cap;
+			}
+			DBG("OCV calib2: pre_cap=%d, pre_rsoc=%d\n", pre_cap, pre_soc);
+		} else {
+			DBG("OCV calib2: ocv_vol = %d, which is too small, skip calib\n", ocv_vol);
 		}
 	}
 finish:
